CRM PROJECT - FORMULAS AND CALCULATIONS
==========================================

This document lists all mathematical formulas, calculations, and computations used throughout the CRM project.

1. DASHBOARD CALCULATIONS (DashboardPage.jsx)
==============================================

1.1 Total Revenue Calculation:
   - Formula: Sum of all project values
   - Code: projects.reduce((acc, project) => acc + (project.value || 0), 0)
   - What it does: Adds up the 'value' field from all projects

1.2 Task Statistics:
   - Completed Tasks: tasks.filter(t => t.status === 'completed').length
   - Pending Tasks: tasks.filter(t => t.status === 'todo' || t.status === 'in-progress').length
   - What it does: Counts tasks by their status

1.3 Customer Growth Percentage:
   - Formula: ((customersThisMonth - customersLastMonth) / Math.abs(customersLastMonth)) * 100
   - What it does: Calculates percentage change in customer count between months
   - Special cases: 
     * If lastMonth = 0 and thisMonth > 0: Shows "New!" (null value)
     * If lastMonth = 0 and thisMonth = 0: Shows 0%

1.4 Project Growth Percentage:
   - Formula: ((projectsThisMonth - projectsLastMonth) / Math.abs(projectsLastMonth)) * 100
   - What it does: Calculates percentage change in project count between months
   - Special cases: Same as customer growth

1.5 Revenue Growth Percentage:
   - Formula: ((revenueThisMonth - revenueLastMonth) / Math.abs(revenueLastMonth)) * 100
   - What it does: Calculates percentage change in revenue between months
   - Special cases: Same as above

2. ANALYTICS CALCULATIONS (AnalyticsPage.jsx)
==============================================

2.1 Chart Percentage Calculation:
   - Formula: (value / total) * 100
   - Code: Math.round((value / total) * 100)
   - What it does: Calculates percentage for pie chart labels
   - Total calculation: ctx.dataset.data.reduce((a, b) => a + b, 0)

2.2 Total Revenue Sum:
   - Formula: Sum of all monthly revenues
   - Code: revenueByMonth.revenue.reduce((a, b) => a + b, 0)
   - What it does: Adds up all monthly revenue values

2.3 PDF Image Scaling:
   - Formula: Math.min(pageWidth / imgProps.width, pageHeight / imgProps.height)
   - What it does: Calculates the best scaling ratio to fit image on PDF page
   - Ensures image fits within page dimensions

3. PROJECT MANAGEMENT CALCULATIONS
==================================

3.1 Project Progress Validation:
   - Formula: Math.max(0, Math.min(100, progressNum))
   - What it does: Ensures progress stays between 0% and 100%
   - Used in: ProjectsPage.tsx for input validation

3.2 Project Progress Display:
   - Formula: Math.max(0, Math.min(100, Number(project.progress || 0)))
   - What it does: Ensures displayed progress is between 0-100%
   - Used for: Progress bars and percentage displays

4. CUSTOMER VALUE CALCULATIONS (CustomersList.tsx)
==================================================

4.1 Customer Total Value:
   - Formula: Sum of all project values for a specific customer
   - Code: projects.filter(project => project.customerId === customerId)
            .reduce((sum, project) => sum + (project.value || 0), 0)
   - What it does: Calculates total revenue generated from a customer

4.2 Customer Projects Count:
   - Formula: Count of projects linked to a customer
   - Code: projects.filter(project => String(project.customerId) === String(customerId)).length
   - What it does: Counts how many projects a customer has

5. PROJECT STATISTICS (ProjectsOverview.tsx)
============================================

5.1 Project Status Counts:
   - Proposal: projects.filter(p => p.status === 'proposal').length
   - In Progress: projects.filter(p => p.status === 'in-progress').length
   - Completed: projects.filter(p => p.status === 'completed').length
   - On Hold: projects.filter(p => p.status === 'on-hold').length
   - What it does: Counts projects by their current status

6. ACTIVITY TIME CALCULATIONS (RecentActivities.tsx)
====================================================

6.1 Time Difference Calculation:
   - Formula: Math.abs(now.getTime() - date.getTime())
   - What it does: Calculates absolute time difference between now and activity date

6.2 Days Difference:
   - Formula: Math.floor(diffTime / (1000 * 60 * 60 * 24))
   - What it does: Converts milliseconds to days
   - Breakdown: 1000ms * 60s * 60min * 24hrs = 1 day in milliseconds

7. BACKEND CALCULATIONS
========================

7.1 OTP Generation (authController.js):
   - Formula: Math.floor(100000 + Math.random() * 900000)
   - What it does: Generates 6-digit random number between 100000-999999
   - Used for: Password reset verification codes

7.2 Monthly Revenue (projectController.js):
   - Formula: Sum of all project values
   - Code: allProjects.reduce((acc, p) => acc + (p.value || 0), 0)
   - What it does: Calculates total revenue from all projects

8. DATA FILTERING AND MAPPING OPERATIONS
========================================

8.1 Array Operations Used Throughout:
   - .filter(): Filters arrays based on conditions
   - .map(): Transforms array elements
   - .reduce(): Combines array elements into single value
   - .length: Counts array elements

9. DATE CALCULATIONS
====================

9.1 Month Boundaries:
   - Start of This Month: new Date(now.getFullYear(), now.getMonth(), 1)
   - Start of Last Month: new Date(now.getFullYear(), now.getMonth() - 1, 1)
   - What it does: Creates date objects for month calculations

9.2 Date Filtering:
   - Used in: Customer growth, project growth, and revenue calculations
   - Filters data by month ranges for trend analysis

10. SUMMARY OF MATHEMATICAL OPERATIONS
======================================

10.1 Basic Operations:
    - Addition (+): Revenue sums, counting
    - Subtraction (-): Percentage change calculations
    - Multiplication (*): Percentage calculations, scaling
    - Division (/): Percentage calculations, ratios

10.2 Math Functions:
    - Math.abs(): Absolute values for percentage calculations
    - Math.floor(): Rounding down for day calculations
    - Math.max()/Math.min(): Constraining values (0-100% for progress)
    - Math.random(): Generating random numbers for OTPs
    - Math.round(): Rounding percentages for display

10.3 Array Methods:
    - .reduce(): Summing values, combining data
    - .filter(): Counting by conditions, filtering data
    - .map(): Transforming data structures

This CRM project primarily uses:
- Percentage calculations for growth metrics
- Sum operations for revenue and counting
- Date-based filtering for trend analysis
- Constraint functions for data validation
- Array operations for data processing

All calculations are performed in real-time based on current data and are used for:
- Dashboard metrics and KPIs
- Analytics and reporting
- Data validation and constraints
- User interface displays
- Business intelligence insights
